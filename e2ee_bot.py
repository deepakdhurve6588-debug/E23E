# -*- coding: utf-8 -*-
import time
import os
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

class E2EEMessenger:
    def __init__(self):
        self.driver = None
        self.messages_sent = 0
    
    def read_file(self, filename, default=""):
        """‡§´‡§æ‡§á‡§≤ ‡§™‡§¢‡§º‡•á‡§Ç"""
        try:
            with open(f"data/{filename}", 'r', encoding='utf-8') as f:
                return f.read().strip()
        except:
            return default
    
    def setup_browser(self):
        """‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç"""
        print("üê≥ Docker ‡§Æ‡•á‡§Ç ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...")
        options = Options()
        
        # Docker ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏
        options.add_argument("--headless=new")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--window-size=1920,1080")
        
        # Anti-detection
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        self.driver = webdriver.Chrome(options=options)
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        print("‚úÖ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§§‡•à‡§Ø‡§æ‡§∞")
    
    def load_cookies(self):
        """‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç"""
        try:
            print("üç™ ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç...")
            self.driver.get("https://facebook.com")
            time.sleep(3)
            
            cookies_loaded = False
            with open('data/cookies.txt', 'r') as f:
                for line in f:
                    if not line.startswith('#') and line.strip():
                        parts = line.strip().split('\t')
                        if len(parts) >= 7:
                            cookie = {
                                'domain': parts[0],
                                'name': parts[5],
                                'value': parts[6],
                                'path': parts[2],
                                'secure': parts[3].lower() == 'true'
                            }
                            try:
                                self.driver.add_cookie(cookie)
                                cookies_loaded = True
                            except:
                                continue
            
            if cookies_loaded:
                print("‚úÖ ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§à‡§Ç")
                return True
            else:
                print("‚ùå ‡§ï‡•ã‡§à ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç")
                return False
                
        except Exception as e:
            print(f"‚ùå ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§è‡§∞‡§∞: {e}")
            return False
    
    def send_e2ee_message(self, message):
        """E2EE ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç"""
        try:
            tid = self.read_file("tid.txt")
            thread_url = f"https://www.facebook.com/messages/e2ee/t/{tid}"
            self.driver.get(thread_url)
            time.sleep(5)
            
            # ‡§Æ‡•à‡§∏‡•á‡§ú ‡§¨‡•â‡§ï‡•ç‡§∏ ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç
            message_box = WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div[role='textbox'], div[contenteditable='true']"))
            )
            message_box.clear()
            message_box.send_keys(message)
            
            # ‡§∏‡•á‡§Ç‡§° ‡§¨‡§ü‡§® ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç
            send_btn = WebDriverWait(self.driver, 15).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "div[aria-label='Send'][role='button']"))
            )
            send_btn.click()
            
            self.messages_sent += 1
            print(f"‚úÖ [{self.messages_sent}] E2EE ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§æ: {message}")
            return True
            
        except Exception as e:
            print(f"‚ùå ‡§Æ‡•à‡§∏‡•á‡§ú ‡§è‡§∞‡§∞: {e}")
            return False
    
    def start(self):
        """‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç"""
        print("üöÄ Docker E2EE Bot Starting...")
        
        # ‡§´‡§æ‡§á‡§≤‡•ç‡§∏ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç
        if not os.path.exists('data/cookies.txt'):
            print("‚ùå data/cookies.txt ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä!")
            print("üëâ data/cookies.txt ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§®‡•Ä Facebook ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç")
            return
        
        tid = self.read_file("tid.txt")
        if not tid or tid == "100000000000000":
            print("‚ùå thread ID ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!")
            print("üëâ data/tid.txt ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§®‡§æ Facebook thread ID ‡§°‡§æ‡§≤‡•á‡§Ç")
            return
        
        # ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∏‡•á‡§ü‡§Ö‡§™
        self.setup_browser()
        
        # ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
        if not self.load_cookies():
            return
        
        # ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
        delay = int(self.read_file("time.txt", "5"))
        prefix = self.read_file("prefix.txt", "ü§ñ ")
        
        # ‡§Æ‡•à‡§∏‡•á‡§ú‡•á‡§∏ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
        messages = []
        try:
            with open('data/messages.txt', 'r', encoding='utf-8') as f:
                messages = [line.strip() for line in f if line.strip()]
        except:
            messages = ["Hello from Docker E2EE Bot!"]
        
        print(f"""
üîç DOCKER CONFIG:
üì± Thread ID: {tid}
‚è∞ Delay: {delay} seconds  
üì® Messages: {len(messages)}
üî§ Prefix: {prefix}
üîí Mode: E2EE Encrypted
üê≥ Container: Running
        """)
        
        print("üîÑ Infinite messaging started... (Stop with: docker stop e2ee-messenger-bot)\n")
        
        # ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≤‡•Ç‡§™
        message_index = 0
        while True:
            current_message = messages[message_index]
            full_message = f"{prefix}{current_message}".strip()
            
            if self.send_e2ee_message(full_message):
                message_index = (message_index + 1) % len(messages)
                time.sleep(delay)
            else:
                print("üîÑ Retrying in 10 seconds...")
                time.sleep(10)

def create_default_files():
    """‡§°‡§ø‡§´‡•â‡§≤‡•ç‡§ü ‡§´‡§æ‡§á‡§≤‡•ç‡§∏ ‡§¨‡§®‡§æ‡§è‡§Ç"""
    os.makedirs("data", exist_ok=True)
    
    files = {
        "tid.txt": "100000000000000",
        "time.txt": "5", 
        "prefix.txt": "ü§ñ [DOCKER]: ",
        "messages.txt": "Hello from Docker E2EE Bot!\nThis is automated message\nTesting E2EE encryption\nMessage sent via Docker container",
        "cookies.txt": """# Facebook Cookies - Paste your cookies here
# Format: domain<TAB>TRUE<TAB>path<TAB>secure<TAB>expiration<TAB>name<TAB>value
.facebook.com	TRUE	/	TRUE	1735689999	xs	PASTE_YOUR_XS_COOKIE_HERE
.facebook.com	TRUE	/	TRUE	1735689999	c_user	PASTE_YOUR_USER_ID_HERE
.facebook.com	TRUE	/	TRUE	1735689999	fr	PASTE_YOUR_FR_COOKIE_HERE
"""
    }
    
    for filename, content in files.items():
        filepath = f"data/{filename}"
        if not os.path.exists(filepath):
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ {filepath} created")
    
    print("\nüéâ Default files created!")
    print("üëâ Now edit these files:")
    print("   - data/cookies.txt: Paste your Facebook cookies")
    print("   - data/tid.txt: Set your thread ID")

if __name__ == "__main__":
    print("=" * 50)
    print("üê≥ DOCKER E2EE MESSENGER BOT")
    print("=" * 50)
    
    # Check if running in Docker
    if not os.environ.get('DOCKER_CONTAINER'):
        print("‚ö†Ô∏è  Not running in Docker container")
        print("üí° Run with: docker-compose up --build")
        
        # Create default files if not exists
        create_default_files()
        sys.exit(0)
    
    # Docker container ‡§Æ‡•á‡§Ç running ‡§π‡•à
    bot = E2EEMessenger()
    
    try:
        bot.start()
    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        if bot.driver:
            bot.driver.quit()
            print("üßπ Browser closed")
